#!/bin/sh
set -euo pipefail

#########
# SETUP #
#########

# Default for terraform directories.
TF_DIR=${BUILDKITE_PLUGIN_TERRAFORM_WORK_DIR:-terraform}
action_list=( validate plan apply )

# We do this to cover cases where modules are stored in GitHub.
# Without this, the container hangs forever waiting for confirmation.
KNOWN_HOSTS_FILE=$(pwd)/known_hosts


if [[ ! -f "$KNOWN_HOSTS_FILE" ]]; then
  ssh-keyscan github.com >> $KNOWN_HOSTS_FILE
fi

if [[ ! ${BUILDKITE_PLUGIN_TERRAFORM_ACTION:-} =~ ${action_list} ]]; then
  echo "Invalid action!!! Action must be [validate | plan | apply]"
fi

# Reads either a value or a list from plugin config
function plugin_read_list() {
  prefix_read_list "BUILDKITE_PLUGIN_TERRAFORM_$1"
}

# Reads either a value or a list from the given env prefix
function prefix_read_list() {
  local prefix="$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i + 1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

terraformBin () {
  local DOCKER_IMAGE="${IMAGE_NAME}:${VERSION}"

  docker_args=()

  docker_args+=(
    "--rm"
    "-it"
    "-v" "$PWD:/svc"
    "-v" "$KNOWN_HOSTS_FILE:/root/.ssh/known_hosts"
  )

  extra_envs=()
  while read -r line; do
    [[ -n "$line" ]] && extra_envs+=("$line")
  done <<< "$(plugin_read_list ENV)"

  for e in ${extra_envs[@]-}; do
    docker_args+=("--env" "$e")
  done

  extra_volumes=()
  while read -r line; do
    [[ -n "$line" ]] && extra_volumes+=("$line")
  done <<< "$(plugin_read_list VOLUMES)"

  for v in ${extra_volumes[@]-}; do
    docker_args+=("-v" "$v")
  done

  docker_args+=(
    "-w" "/svc"
    "$DOCKER_IMAGE"
    "${@}"
  )

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :hammer_and_wrench: Debug on - show Docker command string."
    echo "docker run $(printf "%q " "${docker_args[@]}")"
  fi

  docker run $(printf "%q " "${docker_args[@]}")
}

function terraform-run() {
  local ACTION=${BUILDKITE_PLUGIN_TERRAFORM_ACTION:-}
  local WORK_DIR=${BUILDKITE_PLUGIN_TERRAFORM_WORK_DIR:-"terraform"}
  local DEBUG=${BUILDKITE_PLUGIN_TERRAFORM_DEBUG:-false}
  local IMAGE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_IMAGE:-"hashicorp/terraform"}
  local SKIP_APPLY_NO_DIFF=${BUILDKITE_PLUGIN_TERRAFORM_SKIP_APPLY_NO_DIFF:-false}
  local USE_WORKSPACES=${BUILDKITE_PLUGIN_TERRAFORM_USE_WORKSPACES:-false}
  local VERSION=${BUILDKITE_PLUGIN_TERRAFORM_VERSION:-0.13.0}
  local WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE:-default}
  local ENVIRONMENT=${BUILDKITE_PLUGIN_TERRAFORM_ENVIRONMENT}
  local ECR_REPO=${BUILDKITE_PLUGIN_TERRAFORM_ECR_REPO}

  # Set arguments for terraform init.
  args=()
  while read -r line; do
    [[ -n "$line" ]] && args+=("$line")
  done <<< "$(plugin_read_list INIT_ARGS)"

  # Parse tf env vars and add them to the tf command
  tf_envs=()
  while read -r line; do
    [[ -n "$line" ]] && tf_envs+=("-env" "$line")
  done <<< "$(plugin_read_list TF_ENVS)"

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :hammer_and_wrench: Debug on - list local variables."
    echo "ACTION: ${ACTION}"
    echo "IMAGE_NAME: ${IMAGE_NAME}"
    echo "INIT_ARGS: ${args[@]}"
    echo "SKIP_APPLY_NO_DIFF: ${SKIP_APPLY_NO_DIFF}"
    echo "VERSION: ${VERSION}"
  fi


  terraformBin init "${args[@]}"
  echo ""
  if [[ "${ACTION}" == "validate" ]]; then
    echo "-- Validating modules"
    find ${WORK_DIR}/modules -mindepth 1 -maxdepth 1 -type d -exec sh -c "cd '{}' && terraformBin init -backend=false && terraformBin validate" \;
    echo "-- Validating environments"
    find ${WORK_DIR}/environments -mindepth 1 -maxdepth 1 -type d -exec sh -c "cd '{}' && terraformBin init -backend=false && terraformBin validate" \;  
  fi

  if [[ "${ACTION}" == "plan" ]]; then
    echo "-- Validating modules"
    pwd=$(pwd)
    environment_dir="$pwd/${WORK_DIR}/environments/${ENVIRONMENT}"

    cd $environment_dir

    terraformBin init

    set +e
    terraformBin plan ${tf_envs[@]} -detailed-exitcode -out $ENVIRONMENT.tfplan
    terraform_exit_status=$?
    set -e
    cd $pwd
    case $terraform_exit_status in
    0)
      echo "Terraform plan has no changes."
      buildkite-agent annotate "$ENVIRONMENT environment has **NO** terraform changes." --style "success" --context "$ENVIRONMENT/terraform_changes"
      buildkite-agent meta-data set "$BUILDKITE_PIPELINE_SLUG/$BUILDKITE_BUILD_ID/$ENVIRONMENT/plan_has_changes" "false"
      ;;
    1)
      echo "Terraform plan has errors."
      buildkite-agent annotate "$ENVIRONMENT terraform plan had errors." --style "error" --context "$ENVIRONMENT/terraform_changes"
      exit 1
      ;;
    2)
      echo "Terraform plan has changes."
      buildkite-agent annotate "$ENVIRONMENT environment has terraform changes." --style "warning" --context "$ENVIRONMENT/terraform_changes"
      buildkite-agent meta-data set "$BUILDKITE_PIPELINE_SLUG/$BUILDKITE_BUILD_ID/$ENVIRONMENT/plan_has_changes" "true"
      cd $pwd
      ( cat <<EOF
env:
  AWS_DEFAULT_REGION: ap-southeast-2
  TERRAFORM_DOCKER_VERSION: 0.12.28
  AWS_ACCOUNT_ID: 519527725796
  LOGIN_ECR: true
  TF_LOG_PATH: ./terraform.log

steps: 
  - block: ":rocket: Release to ${ENVIRONMENT}"
    prompt: Release terraform changes to ${ENVIRONMENT} environment?

  - id: "apply-terraform-${ENVIRONMENT}"
    name: ":terraform: Terraform Apply - ${ENVIRONMENT} environment"
    agents:
      queue: linux
    plugins:
      - artifacts#v1.3.0:
          download:
            from: ${ENVIRONMENT}.tfplan
            to: ./terraform/environments/${ENVIRONMENT}/${ENVIRONMENT}.tfplan
          upload: 
            from: terraform.log
            to: terraform.log
      - docker#v3.5.0:
          image: hashicorp/terraform:${TERRAFORM_DOCKER_VERSION}
          command: [".buildkite/scripts/apply-terraform.sh", "${ENVIRONMENT}"]
          propagate-environment: true
          mount-checkout: true
          entrypoint: /bin/sh
    concurrency: 1
    concurrency_group: ${BUILDKITE_PIPELINE_SLUG}/terraform/${ENVIRONMENT}
EOF
) | buildkite-agent pipeline upload
      cd $environment_dir
      terraform-bin show -no-color -json $ENVIRONMENT.tfplan 1>$ENVIRONMENT.json
      cd $pwd
      ;;
    *)
      echo "Unexpected exit status: $terraform_exit_status"
      exit 1
      ;;
    esac
  fi

  if [[ "${ACTION}" == "apply" ]]; then
    has_changes=$(buildkite-agent meta-data get "$BUILDKITE_PIPELINE_SLUG/$BUILDKITE_BUILD_ID/$ENVIRONMENT/plan_has_changes")
    pwd=$(pwd)
    environment_dir="$pwd/${WORK_DIR}/environments/${ENVIRONMENT}"
    
    if [ $has_changes == "true" ]; then

      cd $environment_dir
      buildkite-agent artifact download $ENVIRONMENT.tfplan .

      terraformBin init
      echo "Teraform apply"
      #terraform apply -auto-approve $ENVIRONMENT.tfplan

      buildkite-agent annotate "$ENVIRONMENT environment terraform changes applied" --style "success" --context "$ENVIRONMENT/terraform_changes"

      buildkite-agent meta-data set "$BUILDKITE_PIPELINE_SLUG/$BUILDKITE_BUILD_ID/$ENVIRONMENT/autoscaling_group_name" $(terraform output autoscaling_group_name)
      cd $pwd
    else
      echo "Skipping because no changes required."
    fi
  fi
}
terraform-run
